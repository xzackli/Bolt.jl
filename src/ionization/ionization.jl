# Temporarily removing this to get rid of the issues with ih diff
# abstract type AbstractIonizationHistory{T, IT<:AbstractInterpolation{T,1}} end
#
# abstract type IonizationIntegrator end
# struct Peebles <: IonizationIntegrator end
# #
# # struct PeeblesI{T, AB<:AbstractBackground{T},
# #                          ACP<:AbstractCosmoParams{T}} <: IonizationIntegrator
# #     bg::AB  # like RECFAST, has an associated background evolution
# #     par::ACP #why not
# #     # a=1.0 testing dummy kw
# # end
# struct IonizationHistory{T, IT} <: AbstractIonizationHistory{T, IT}
#     X‚Çë::IT
#     œÑ::IT
#     œÑ‚Ä≤::IT
#     œÑ‚Ä≤‚Ä≤::IT
#     gÃÉ::IT
#     gÃÉ‚Ä≤::IT
#     gÃÉ‚Ä≤‚Ä≤::IT
#     Tmat::IT
#     csb¬≤::IT
#     Trad::IT
# end


## Saha Equation
## Useful for high ionization fractions.

# auxillary equations for saha_rhs
const PeeblesT‚ÇÄ = ustrip(natural(2.725u"K"))  # CMB temperature [K]  # TODO: make this a parameter of the ionization
n_b(a, par) = par.Œ©_b * œÅ_crit(par) / (m_H * a^3)
n_H(a, par) = n_b(a, par) *(1-par.Y_p) #Adding Helium!
saha_T_b(a, par) = PeeblesT‚ÇÄ / a #j why does this take par?
saha_rhs(a, par) = (m_e * saha_T_b(a, par) / 2œÄ)^(3/2) / n_H(a, par) *
    exp(-Œµ‚ÇÄ_H / saha_T_b(a, par))  # rhs of Callin06 eq. 12

function saha_X‚Çë(x, par::AbstractCosmoParams)
    rhs = saha_rhs(x2a(x), par)
    return  (‚àö(rhs^2 + 4rhs) - rhs) / 2  # solve X‚Çë¬≤ / (1-X‚Çë) = RHS, it's a polynomial
end
saha_X‚Çë(par) = (x -> saha_X‚Çë(x, par))


## Peebles Equation
## Use this for X‚Çë < 0.99, i.e. z < 1587.4

# recombination parameters for Saha/Peebles
const Œõ_2s_to_1s = ustrip(natural(8.227u"s^-1"))  # rate of hydrogen double transition from 2s to 1s
const Œµ‚ÇÄ_H = ustrip(natural(13.605698u"eV"))  # ionization energy of hydrogen
const m_e = ustrip(natural(float(ElectronMass)))
const m_H = ustrip(natural(float(ProtonMass)))
const Œ± = ustrip(natural(float(FineStructureConstant)))
const œÉ_T = ustrip(natural(float(ThomsonCrossSection)))

# auxillary equations
œï‚ÇÇ(T_b) = 0.448 * log(Œµ‚ÇÄ_H / T_b)
Œ±‚ÅΩ¬≤‚Åæ(T_b) = (64œÄ / ‚àö(27œÄ)) * (Œ±^2 / m_e^2) * ‚àö(Œµ‚ÇÄ_H / T_b) * œï‚ÇÇ(T_b)
Œ≤(T_b) = Œ±‚ÅΩ¬≤‚Åæ(T_b) * (m_e * T_b / (2œÄ))^(3/2) * exp(-Œµ‚ÇÄ_H / T_b)
Œ≤‚ÅΩ¬≤‚Åæ(T_b) = Œ≤(T_b) * exp(3Œµ‚ÇÄ_H / 4T_b)
n‚ÇÅ‚Çõ(a, X‚Çë, par) = (1 - X‚Çë) * n_H(a, par)
#Problem is here \/ since LyŒ± rate is given by redshifting out of line need H
# Œõ_Œ±(a, X‚Çë, par) = H_a(a, par) * (3Œµ‚ÇÄ_H)^3 / ((8œÄ)^2 * n‚ÇÅ‚Çõ(a, X‚Çë, par))
Œõ_Œ±(a, X‚Çë, par) = oldH_a(a, par) * (3Œµ‚ÇÄ_H)^3 / ((8œÄ)^2 * n‚ÇÅ‚Çõ(a, X‚Çë, par))
new_Œõ_Œ±(a, X‚Çë, par, ‚Ñã_function) = ‚Ñã_function(log(a)) * (3Œµ‚ÇÄ_H)^3 / ((8œÄ)^2 * n‚ÇÅ‚Çõ(a, X‚Çë, par))
C·µ£(a, X‚Çë, T_b, par) = (Œõ_2s_to_1s + Œõ_Œ±(a, X‚Çë, par)) / (
    Œõ_2s_to_1s + Œõ_Œ±(a, X‚Çë, par) + Œ≤‚ÅΩ¬≤‚Åæ(T_b))
new_C·µ£(a, X‚Çë, T_b, par,‚Ñã_function) = (Œõ_2s_to_1s + new_Œõ_Œ±(a, X‚Çë, par,‚Ñã_function)) / (
    Œõ_2s_to_1s + new_Œõ_Œ±(a, X‚Çë, par,‚Ñã_function) + Œ≤‚ÅΩ¬≤‚Åæ(T_b))

# RHS of Callin06 eq. 13
function peebles_X‚Çë‚Ä≤(X‚Çë, par, x)
    a = exp(x)
    T_b_a = BigFloat(saha_T_b(a, par))  # handle overflows by switching to bigfloat
    # return float(C·µ£(a, X‚Çë, T_b_a, par) / H_a(a, par) * (
    return float(C·µ£(a, X‚Çë, T_b_a, par) / oldH_a(a, par) * (
        Œ≤(T_b_a) * (1 - X‚Çë) - n_H(a, par) * Œ±‚ÅΩ¬≤‚Åæ(T_b_a) * X‚Çë^2))
end

# function new_peebles_X‚Çë‚Ä≤( X‚Çë, ùï°ùïö::PeeblesI, x)
#     a = exp(x)
#     par = ùï°ùïö.par
#     ‚Ñã_function = ùï°ùïö.bg.‚Ñã
#     T_b_a = BigFloat(saha_T_b(a, par))  # handle overflows by switching to bigfloat
#     res= float(new_C·µ£(a, X‚Çë, T_b_a, par,‚Ñã_function) / ‚Ñã_function(x) * (
#         Œ≤(T_b_a) * (1 - X‚Çë) - n_H(a, par) * Œ±‚ÅΩ¬≤‚Åæ(T_b_a) * X‚Çë^2))
#     # println("typeof res ", typeof(res))
#     return res
#     # return float(new_C·µ£(a, X‚Çë, T_b_a, par,‚Ñã_function) / ‚Ñã_function(x) * (
#     #     Œ≤(T_b_a) * (1 - X‚Çë) - n_H(a, par) * Œ±‚ÅΩ¬≤‚Åæ(T_b_a) * X‚Çë^2))
# end


"""
    peebles_X‚Çë(par, X‚Çë‚ÇÄ, x_start, x_end)

Solve the Peebles equation over a span of scale factors, and then
construct an interpolator mapping scale factor to the resulting
ionization fraction.

# Arguments:
- `par`: cosmological parameters
- ` X‚Çë‚ÇÄ`: initial ionization fraction
- `x_start`: scale factor to begin integration
- `x_end`: scale factor to end integration

# Returns:
- `generic function`: interpolator for X‚Çë(x)
"""
function peebles_X‚Çë(par, X‚Çë‚ÇÄ, x_start, x_end)
    # set up problem and integrate dX‚Çë/dx = peebles_X‚Çë‚Ä≤
    prob = ODEProblem(peebles_X‚Çë‚Ä≤, X‚Çë‚ÇÄ, (x_start, x_end), par)
    sol = solve(prob, Tsit5(), reltol=1e-11, abstol=1e-11, dense=true)
    return sol  # ode solutions work as interpolator
end
# function new_peebles_X‚Çë(ùï°ùïö::PeeblesI{T}, X‚Çë‚ÇÄ, x_start, x_end)  where {T}
#     # ùï°ùïö passing version of old solver
#     # prob = ODEProblem{true}(peebles_X‚Çë!‚Ä≤, X‚Çë‚ÇÄ, (x_start, x_end), ùï°ùïö)
#     prob = ODEProblem(new_peebles_X‚Çë‚Ä≤, X‚Çë‚ÇÄ, (x_start, x_end), ùï°ùïö)
#     sol = solve(prob, Tsit5(), reltol=1e-11, abstol=1e-11, dense=true)
#     # println("typeof sol ", typeof(sol))
#     return sol  # ode solutions work as interpolator
# end


"""
    saha_peebles_recombination(par::AbstractCosmoParams)

Utility function for generating a decent approximation to X‚Çë in ŒõCDM recombination,
using the Saha equation until z=1587.4 and then the Peebles equation for the rest.
"""
function saha_peebles_recombination(par::AbstractCosmoParams{T}) where {T}
    z_transition = 1587.4
    x_transition = z2x(z_transition)
    saha_z_grid = 1800:-10:z_transition
    peebles_z_grid = z_transition:-10:100
    early_time_X‚Çë = Bolt.saha_X‚Çë(par)
    late_time_X‚Çë = Bolt.peebles_X‚Çë(
        par, early_time_X‚Çë(x_transition), x_transition, 0.0)
    X‚Çë = x -> (x < x_transition) ? early_time_X‚Çë(x) : late_time_X‚Çë(x)
    return X‚Çë
end
# function new_saha_peebles_recombination(ùï°ùïö::PeeblesI{T}) where {T}
#     z_transition = 1587.4
#     x_transition = z2x(z_transition)
#     saha_z_grid = 1800:-10:z_transition
#     peebles_z_grid = z_transition:-10:100
#     early_time_X‚Çë = Bolt.saha_X‚Çë(ùï°ùïö.par)
#     late_time_X‚Çë = Bolt.new_peebles_X‚Çë(
#         ùï°ùïö, early_time_X‚Çë(x_transition), x_transition, 0.0)
#     X‚Çë = x -> (x < x_transition) ? early_time_X‚Çë(x) : late_time_X‚Çë(x)
#     # println("typeof Xe ", typeof(X‚Çë))
#     return X‚Çë
# end


function oldœÑ_functions(x, X‚Çë_function, par::AbstractCosmoParams)
    @assert x[2] > x[1]  # CONVENTION: x increasing always
    # do a reverse cumulative integrate
    rx = reverse(x)
    œÑ_primes = [oldœÑ‚Ä≤(x_, X‚Çë_function, par) for x_ in x]
    œÑ_integrated = reverse(cumul_integrate(rx, reverse(œÑ_primes)))

    œÑÃÇ = interpolate((x,),œÑ_integrated,Gridded(Linear()))
    œÑÃÇ‚Ä≤ = interpolate((x,),œÑ_primes,Gridded(Linear()))
    return œÑÃÇ, œÑÃÇ‚Ä≤
end

function œÑ_functions(x, X‚Çë_function, par::AbstractCosmoParams,‚Ñã_function)
    @assert x[2] > x[1]  # CONVENTION: x increasing always
    # do a reverse cumulative integrate
    rx = reverse(x)
    œÑ_primes = [œÑ‚Ä≤(x_, X‚Çë_function, par, ‚Ñã_function) for x_ in x]
    œÑ_integrated = reverse(cumul_integrate(rx, reverse(œÑ_primes)))

    œÑÃÇ = interpolate((x,),œÑ_integrated,Gridded(Linear()))
    œÑÃÇ‚Ä≤ = interpolate((x,),œÑ_primes,Gridded(Linear()))
    return œÑÃÇ, œÑÃÇ‚Ä≤
end

function œÑÃá(x, X‚Çë_function, par)
    a = x2a(x)
    return X‚Çë_function(x) * n_H(a, par) * a
end

function œÑ‚Ä≤(x, X‚Çë_function, par, ‚Ñã_function)
    a = x2a(x)
    return -X‚Çë_function(x) * n_H(a, par) * a * œÉ_T / ‚Ñã_function(x)
end
function oldœÑ‚Ä≤(x, X‚Çë_function, par)
    a = x2a(x)
    #return -X‚Çë_function(x) * n_H(a, par) * a * œÉ_T / ‚Ñã_a(a, par)
    return -X‚Çë_function(x) * n_H(a, par) * a * œÉ_T / (a*oldH_a(a,par))
end

function gÃÉ_function(œÑ_x_function, œÑ‚Ä≤_x_function)
    return x -> -œÑ‚Ä≤_x_function(x) * exp(-œÑ_x_function(x))
end


# this Peebles history comes from Callin+06, peep the plots from examples/
# which match that paper perfectly
#j we don't really need par or bg in this call anymore \/ but I will leave it
# function IonizationHistory(integrator::Peebles, par::ACP, bg::AB) where
# # function IonizationHistory(ùïöùï°::PeeblesI{T},  par::ACP, bg::AB) where
#                            {T, ACP<:AbstractCosmoParams{T}, AB<:AbstractBackground}
#     x_grid = bg.x_grid
#     X‚Çë_function = Bolt.saha_peebles_recombination(par)
#     # X‚Çë_function = Bolt.iip_saha_peebles_recombination(ùïöùï°)
#     # ‚Ñã_function = bg.‚Ñã
#     # œÑ, œÑ‚Ä≤ = œÑ_functions(x_grid, X‚Çë_function, par, ‚Ñã_function)
#     œÑ, œÑ‚Ä≤ = oldœÑ_functions(x_grid, X‚Çë_function, par)
#     gÃÉ = gÃÉ_function(œÑ, œÑ‚Ä≤)
#
#
#     X‚Çë_ = spline(X‚Çë_function.(x_grid), x_grid)
#     œÑ_ = spline(œÑ.(x_grid), x_grid)
#     gÃÉ_ = spline(gÃÉ.(x_grid), x_grid)
#     IT = typeof(X‚Çë_)
#
#     Trad_ = spline(PeeblesT‚ÇÄ .* (1 .+ x2z.(x_grid)), x_grid)
#     # in this model, Tmat ~ Trad
#     #sound speed
#     csb¬≤_pre = 2.99792458e8^-2 * 1.380658e-23 / (3.9715e0/(3.9715e0-(3.9715e0-1)*par.Y_p)) / 1.673575e-27#hardcode the prefactor for non-recfast, though not sure if we will be using these later?
#     #ùï£.C^-2 * ùï£.k_B/ùï£.mu_T/ùï£.m_H
#     csb¬≤_ = spline(csb¬≤_pre * (Trad_.(x_grid) .- 1/3 *spline_‚àÇ‚Çì(Trad_, x_grid).(x_grid)),x_grid)
#
#
#     #TODO NO REIONIZATION FOR PEEBLES (or just remove this)
#
#     return IonizationHistory{T, IT}(
#         X‚Çë_,
#         œÑ_,
#         spline_‚àÇ‚Çì(œÑ_, x_grid),
#         spline_‚àÇ‚Çì¬≤(œÑ_, x_grid),
#         gÃÉ_,
#         spline_‚àÇ‚Çì(gÃÉ_, x_grid),
#         spline_‚àÇ‚Çì¬≤(gÃÉ_, x_grid),
#         Trad_,
#         csb¬≤_,
#         Trad_
#     )
# end

# function IonizationHistory(ùïöùï°::PeeblesI{T},  par::ACP, bg::AB) where
#                            {T, ACP<:AbstractCosmoParams{T}, AB<:AbstractBackground}
#     x_grid = bg.x_grid
#     #X‚Çë_function = Bolt.saha_peebles_recombination(par)
#     X‚Çë_function = Bolt.new_saha_peebles_recombination(ùïöùï°)
#     ‚Ñã_function = bg.‚Ñã
#     œÑ, œÑ‚Ä≤ = œÑ_functions(x_grid, X‚Çë_function, par, ‚Ñã_function)
#     gÃÉ = gÃÉ_function(œÑ, œÑ‚Ä≤)
#
#
#     X‚Çë_ = spline(X‚Çë_function.(x_grid), x_grid)
#     œÑ_ = spline(œÑ.(x_grid), x_grid)
#     gÃÉ_ = spline(gÃÉ.(x_grid), x_grid)
#     IT = typeof(X‚Çë_)
#     # println("typeof IT ", IT)
#
#     Trad_ = spline(PeeblesT‚ÇÄ .* (1 .+ x2z.(x_grid)), x_grid)
#     # in this model, Tmat ~ Trad
#     #sound speed
# 	csb¬≤_pre = 2.99792458e8^-2 * 1.380658e-23 / (3.9715e0/(3.9715e0-(3.9715e0-1)*par.Y_p)) / 1.673575e-27#hardcode the prefactor for non-recfast, though not sure if we will be using these later?
#     #ùï£.C^-2 * ùï£.k_B/ùï£.mu_T/ùï£.m_H
# 	csb¬≤_ = spline(csb¬≤_pre * (Trad_.(x_grid) .- 1/3 *spline_‚àÇ‚Çì(Trad_, x_grid).(x_grid)),x_grid)
#
#     # TO FIX, WHY DOES THIS CONSTRUCTOR REQUIRE {I, IT}???
#     # println("check aa ", isa(X‚Çë_, AbstractArray))
#     return IonizationHistory{T, IT}(
#         X‚Çë_,
#         œÑ_,
#         spline_‚àÇ‚Çì(œÑ_, x_grid),
#         spline_‚àÇ‚Çì¬≤(œÑ_, x_grid),
#         gÃÉ_,
#         spline_‚àÇ‚Çì(gÃÉ_, x_grid),
#         spline_‚àÇ‚Çì¬≤(gÃÉ_, x_grid),
#         Trad_,
#         csb¬≤_,
#         Trad_
#     )
# end
