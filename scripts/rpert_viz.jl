#jms - Marius's notebook
# setup
using Revise
using Bolt
# using Plots
# using Interpolations
using DelimitedFiles
using FFTW
using PyCall
using LinearAlgebra
using Roots

#bolt setup
ùï° = CosmoParams()
bg = Background(ùï°)#; x_grid=-25.0:0.01:0.0)
ùï£ = Bolt.RECFAST(bg=bg, Yp=ùï°.Y_p, OmegaB=ùï°.Œ©_b)
ih = IonizationHistory(ùï£, ùï°, bg)
# x_grid = -25:0.01:0.0

#time and space
nk = 1000
nx = 200
z_span = (10000000,10000)

#runs from -16.1 -> -9ish
x_grid = map(range(bg.Œ∑.(z2x.(z_span))..., length=100)) do Œ∑
	find_zero(x -> bg.Œ∑.(x) - Œ∑, z2x.(z_span))
end
#big k grid
k_grid = range(0, 20000bg.H‚ÇÄ, length=(nk+1))[2:end]
k_grid_full = [-reverse(k_grid); 0; k_grid]
#what does this @ do? oh cool in does the dot at every point - convenient!
Œ¶x‚ÇÄ = @. exp(-(k_grid_full/$last(k_grid))^2/(2*0.01^2))
Œ¶k‚ÇÄ = rfft(Œ¶x‚ÇÄ)[2:end]

solns = map(enumerate(k_grid), Œ¶k‚ÇÄ) do (i,k), Œ¶‚ÇÄ
    hierarchy = Hierarchy(BasicNewtonian(), ùï°, bg, ih, k, 8)
    perturb = boltsolve(hierarchy; reltol=1e-8, Œ¶‚ÇÄ=abs(Œ¶‚ÇÄ))
	(perturb,hierarchy)
end;

#some thing to do the FT and unpack all at once?
#change it to account for ‚Ñ≥
using Bolt: unpack
grid = broadcast(solns, Œ¶k‚ÇÄ, x_grid') do (perturb,hierarchy), Œ¶‚ÇÄ, x
	Œò, Œò·µñ, ùí©, ‚Ñ≥, Œ¶, Œ¥, v, Œ¥_b, v_b = unpack(perturb(x), hierarchy)
	exp(im*angle(Œ¶‚ÇÄ)) .* ((Œò[0] - 0), (ùí©[0] - 0), Œ¥ - 0, Œ¥_b - 0)
end;

plot(grid[:,1])
plot(grid[:,])



plot(grid_real_Œ∏[:,80] ./(5*minimum(grid_real_Œ∏[:,80])))
plot!(grid_real_Œ¥_b[:,80] ./(5*minimum(grid_real_Œ¥_b[:,80])))
ylims!(-.1,.3)
xlims!(1000,1200)
#look
zz = [ones(100); zeros(nk-100+1)]
y = [zero(x_grid)'; getindex.(grid,1)][:,end] .* zz
using Plots
plot(-irfft(y,2nk+1))

#pull out components we want to look at
grid_real_Œ∏   = irfft([zero(x_grid)'; getindex.(grid,1)] .* zz, 2nk+1, 1);
grid_real_ŒΩ   = irfft([zero(x_grid)'; getindex.(grid,2)],       2nk+1, 1);
grid_real_Œ¥   = irfft([zero(x_grid)'; getindex.(grid,3)],       2nk+1, 1);
grid_real_Œ¥_b = irfft([zero(x_grid)'; getindex.(grid,4)] .* zz, 2nk+1, 1);

#save for animating later
writedlm("../compare/dcosmoviz_theta.dat",grid_real_Œ∏)
writedlm("../compare/dcosmoviz_nu.dat",grid_real_ŒΩ)
writedlm("../compare/dcosmoviz_delta.dat",grid_real_Œ¥)
writedlm("../compare/dcosmoviz_deltab.dat",grid_real_Œ¥_b)
writedlm("../compare/dcosmoviz_xgrid.dat",x_grid)
