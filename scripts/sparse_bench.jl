# using Revise
using Bolt
using Plots
using Printf
using Interpolations, DataInterpolations
using DelimitedFiles

# bg/ion setup
ùï° = CosmoParams()
n_q=15
logqmin,logqmax = -6,-1
bg = Background(ùï°; x_grid=-20.0:0.01:0.0, nq=n_q)
ùï£ = Bolt.RECFAST(bg=bg, Yp=ùï°.Y_p, OmegaB=ùï°.Œ©_b, OmegaG=ùï°.Œ©_r)
ih = IonizationHistory(ùï£, ùï°, bg)


x_grid = bg.x_grid

# Choose a k-mode to compare to saved class perturbations at
k_options = ["p03", "p3", "1p0", #choose from k = [0.03h/Mpc, 0.3h/Mpc, 1.0h/Mpc]
             "p01", ] #newly computed k modes
k_choice = k_options[1]
#Read in CLASS perturbations
#CLASS keys (for reference):
#['k (h/Mpc)', 'd_g', 'd_b', 'd_cdm', 'd_ur', 'd_ncdm[0]', 'd_tot',
#'phi', 'psi', 't_g', 't_b', 't_cdm', 't_ur', 't_ncdm[0]', 't_tot']
retnf = open( @sprintf("./test/data/zack_N_class_px_k%s_nofluid_nonu.dat",k_choice),"r" ) do datafile
# an example that goes to early times -> retnf = open("./test/data/lowres_class_px_kp03_nofluid.dat","r") do datafile
    [parse.(Float64, split(line)) for line in eachline(datafile)]
end
#the second column is just a repeated k value, so remember it and delete col
kclass = retnf[2][1] #read class k mode from file (in h/Mpc)
# k = (bg.H‚ÇÄ*3e5/100)*kclass #get k in our units ->old value
k = ùï°.h*kclass  #get k in our units
# k = ùï°.h * kclass
class_pxsnf = transpose(reduce(hcat,retnf[1:end .!= 2]))

xhor = x_grid[argmin(abs.(k ./ (2œÄ* bg.‚Ñã.(x_grid).*ùï°.h) .- 1))] #horizon crossing ish
println("k = ", kclass," log10k = ", log10(kclass), " h/Mpc")

#pert setup
‚Ñì·µß=50
‚Ñì_ŒΩ=50
‚Ñì_mŒΩ=20
reltol=1e-9
abstol=1e-9
pertlen = 2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*n_q+5
results=zeros(pertlen,length(x_grid))
‚Ñ≥œÅ,‚Ñ≥œÉ = zeros(length(x_grid)),zeros(length(x_grid)) #arrays for the massive neutrino integrated perts
hierarchy = Hierarchy(BasicNewtonian(), ùï°, bg, ih, k, ‚Ñì·µß, ‚Ñì_ŒΩ, ‚Ñì_mŒΩ,n_q)
#solve (with rsa)
##
using BenchmarkTools, OrdinaryDiffEq, LinearSolve
using Symbolics
x·µ¢ = (hierarchy.bg.x_grid)[1]
u‚ÇÄ = Bolt.initial_conditions(x·µ¢, hierarchy)
du_dummy = deepcopy(u‚ÇÄ)
hf(du, u) = Bolt.hierarchy!(du, u, hierarchy, x·µ¢)
jac_sparsity = Symbolics.jacobian_sparsity(hf,du_dummy,u‚ÇÄ)

##

function test(hierarchy, alg, sparsity; reltol=1e-9, abstol=1e-9)
    x·µ¢ = first(hierarchy.bg.x_grid)
    u‚ÇÄ = initial_conditions(x·µ¢, hierarchy)
    f = ODEFunction(Bolt.hierarchy!; jac_prototype=float.(sparsity))
    prob = ODEProblem{true}(f, u‚ÇÄ, (x·µ¢ , 0.0), hierarchy)
    sol = solve(prob, alg, reltol=reltol, abstol=abstol,
                saveat=hierarchy.bg.x_grid, dense=false,
                )
end

@btime test(hierarchy, KenCarp4(linsolve=KLUFactorization()), jac_sparsity; reltol=reltol, abstol=abstol); # 486 ms
@btime test(hierarchy, KenCarp4(), jac_sparsity; reltol=reltol, abstol=abstol); # 1.028 s

##
@profview test(hierarchy, KenCarp4(linsolve=KLUFactorization()), jac_sparsity; reltol=reltol, abstol=abstol);
