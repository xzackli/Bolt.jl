
using CUDA, StaticArrays, OffsetArrays, Adapt, Interpolations
using Bolt
using BenchmarkTools
using Setfield
CUDA.allowscalar(false)

##

storage = CUDA.CuArrayAdaptor{Mem.DeviceBuffer}() # for Float32 CuArray
# storage = nothing # for Array

##

# re-use Bspline, Scaled Interpolations code needed for bg, ih
function Adapt.adapt_structure(to, itp::Interpolations.BSplineInterpolation{T,N,<:Any,IT,Axs}) where {T,N,IT,Axs}
    coefs = Adapt.adapt_structure(to, itp.coefs)
    Tcoefs = typeof(coefs)
    Interpolations.BSplineInterpolation{T,N,Tcoefs,IT,Axs}(coefs, itp.parentaxes, itp.it)
end

function Adapt.adapt_structure(to, itp::Interpolations.ScaledInterpolation{T,N,ITPT,IT,<:Any}) where {T,N,ITPT,IT}
    s = Adapt.adapt_structure(to,itp.itp)
    Titp = typeof(s)
    ranges = Adapt.adapt_structure(to,itp.ranges)
    RT=typeof(ranges)
    Interpolations.ScaledInterpolation{T,N,Titp,IT,RT}(s,ranges)
end

function gpu_unpack(u)  #use Marius' trick for the ntuples to avoid size limits on tuples
    Œò = OffsetVector(SVector(ntuple(i -> u[i], Val(‚Ñì·µß+1))), 0:‚Ñì·µß)
    Œò·µñ = OffsetVector(SVector(ntuple(i -> u[i+(‚Ñì·µß+1)], Val(‚Ñì·µß+1))), 0:‚Ñì·µß)
    ùí© = OffsetVector(SVector(ntuple(i -> u[i+2(‚Ñì·µß+1)], Val(‚Ñì_ŒΩ+1))), 0:‚Ñì_ŒΩ)
    ‚Ñ≥  = OffsetVector(SVector(ntuple(i -> u[i+2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)], Val((‚Ñì_mŒΩ+1)*nq))), 0:(‚Ñì_mŒΩ+1)*nq -1)
    Œ¶, Œ¥, v, Œ¥_b, v_b = SVector(ntuple(i -> u[i+2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*nq], Val(5)))
    return Œò, Œò·µñ, ùí©, ‚Ñ≥, Œ¶, Œ¥, v, Œ¥_b, v_b
end

##

#adapts
Adapt.@adapt_structure Background
Adapt.@adapt_structure IonizationHistory
Adapt.@adapt_structure Hierarchy #give this a shot not sure it's gonna work

# bg/ion setup
ùï° = CosmoParams()
bg = Background(ùï°; x_grid=-20.0:0.1:0.0, nq=5)
ùï£ = Bolt.RECFAST(bg=bg, Yp=ùï°.Y_p, OmegaB=ùï°.Œ©_b)
ih = IonizationHistory(ùï£, ùï°, bg)
k = 500bg.H‚ÇÄ
reltol=1e-5
#FIXME run out of GPU memory with 50, 50, 20, 15 or 20 20 10 15
# ‚Ñì·µß = 20
# ‚Ñì_ŒΩ = 20 
# ‚Ñì_mŒΩ  = 4
# nq = 6
hierarchy = adapt(storage, Hierarchy(BasicNewtonian(), ùï°, bg, ih, k, 10,10,8,5))

#This is necessary for unpack since we can't pass the OffsetArray sizes as arguments
const ‚Ñì·µß = hierarchy.‚Ñì·µß
const ‚Ñì_ŒΩ = hierarchy.‚Ñì_ŒΩ
const ‚Ñì_mŒΩ  = hierarchy.‚Ñì_mŒΩ
const nq = hierarchy.nq

##

x·µ¢ = first(hierarchy.bg.x_grid)
u‚ÇÄ = CUDA.@allowscalar adapt(storage, Bolt.initial_conditions(x·µ¢, hierarchy))
du = zero(u‚ÇÄ)

f_kernel!, batch_f_kernel! = let u‚ÇÄ = u‚ÇÄ, h = hierarchy
    
    function f_kernel!(du, x)
        # get all the data
        k, par,bg,ih = h.k, h.par, h.bg,h.ih
        Œ©_r, Œ©_b, Œ©_m, N_ŒΩ, m_ŒΩ, H‚ÇÄ¬≤ = par.Œ©_r, par.Œ©_b, par.Œ©_m, par.N_ŒΩ, par.Œ£m_ŒΩ, bg.H‚ÇÄ^2 #add N_ŒΩ‚â°N_eff
        ‚Ñã‚Çì, ‚Ñã‚Çì‚Ä≤, Œ∑‚Çì, œÑ‚Çì‚Ä≤, œÑ‚Çì‚Ä≤‚Ä≤, csb¬≤ = bg.‚Ñã(x), bg.‚Ñã‚Ä≤(x), bg.Œ∑(x), ih.œÑ‚Ä≤(x), ih.œÑ‚Ä≤‚Ä≤(x),ih.csb¬≤(x)
        a = x2a(x)
        TŒΩ =  (N_ŒΩ/3)^(1/4) *(4/11)^(1/3) * (15/ œÄ^2 *Bolt.œÅ_crit(par) *Œ©_r)^(1/4)
        logqmin,logqmax=log10(TŒΩ/30),log10(TŒΩ*30)
        
        R = 4Œ©_r / (3Œ©_b * a)
        Œ©_ŒΩ =  7*(2/3)*N_ŒΩ/8 *(4/11)^(4/3) *Œ©_r
        # œÅ‚Ñ≥, œÉ‚Ñ≥  =  Bolt.œÅ_œÉ(‚Ñ≥[0:nq-1], ‚Ñ≥[2*nq:3*nq-1], bg, a, par) #monopole (energy density, 00 part),quadrupole (shear stress, ij part)
        œµx(x, am) = ‚àö(Bolt.xq2q(x,logqmin,logqmax)^2 + (am)^2)
        IœÅ(x) = Bolt.xq2q(x,logqmin,logqmax)^2  * œµx(x, a*m_ŒΩ) * Bolt.f0(Bolt.xq2q(x,logqmin,logqmax),par) / Bolt.dxdq(Bolt.xq2q(x,logqmin,logqmax),logqmin,logqmax)
        IœÉ(x) = Bolt.xq2q(x,logqmin,logqmax)^2  * (Bolt.xq2q(x,logqmin,logqmax)^2 /œµx(x, a*m_ŒΩ)) * f0(Bolt.xq2q(x,logqmin,logqmax),par) / Bolt.dxdq(Bolt.xq2q(x,logqmin,logqmax),logqmin,logqmax)
        xq,wq = bg.quad_pts,bg.quad_wts
 

        # do the unpack
        Œò, Œò·µñ, ùí©, ‚Ñ≥, Œ¶, Œ¥, v, Œ¥_b, v_b = gpu_unpack(u‚ÇÄ)
        Œò‚Ä≤, Œò·µñ‚Ä≤, ùí©‚Ä≤, ‚Ñ≥‚Ä≤, Œ¶‚Ä≤, Œ¥‚Ä≤, v‚Ä≤, Œ¥_b‚Ä≤, v_b‚Ä≤ = gpu_unpack(du)

        œÅ‚Ñ≥, œÉ‚Ñ≥  =  0.,0.
        for i in 1:nq #have to un-broadcast this...
            œÅ‚Ñ≥ += 4œÄ*IœÅ(xq[1])*‚Ñ≥[0*nq+i-1]*wq[i]
            œÉ‚Ñ≥ += 4œÄ*IœÉ(xq[i])*‚Ñ≥[2*nq+i-1]*wq[i]
        end

        #start setting the perturbations
        # metric
        Œ® = -Œ¶ - 12H‚ÇÄ¬≤ / k^2 / a^2 * (Œ©_r * Œò[2]+
                                     Œ©_ŒΩ * ùí©[2]
                                     + œÉ‚Ñ≥ / bg.œÅ_crit /4
                                    )
        Œ¶‚Ä≤ = Œ® - k^2 / (3‚Ñã‚Çì^2) * Œ¶ + H‚ÇÄ¬≤ / (2‚Ñã‚Çì^2) * (
            Œ©_m * a^(-1) * Œ¥ + Œ©_b * a^(-1) * Œ¥_b
            + 4Œ©_r * a^(-2) * Œò[0]
            + 4Œ©_ŒΩ * a^(-2) * ùí©[0]
            + a^(-2) * œÅ‚Ñ≥ / bg.œÅ_crit
        )
        # matter
        Œ¥‚Ä≤ = k / ‚Ñã‚Çì * v - 3Œ¶‚Ä≤
        v‚Ä≤ = -v - k / ‚Ñã‚Çì * Œ®
        Œ¥_b‚Ä≤ = k / ‚Ñã‚Çì * v_b - 3Œ¶‚Ä≤
        v_b‚Ä≤ = -v_b - k / ‚Ñã‚Çì * ( Œ® + csb¬≤ *  Œ¥_b) + œÑ‚Çì‚Ä≤ * R * (3Œò[1] + v_b)

        # relativistic neutrinos (massless)
        @set! ùí©‚Ä≤[0] = -k / ‚Ñã‚Çì * ùí©[1] - Œ¶‚Ä≤ #for some reason need set here...
        ùí©‚Ä≤[1] = k/(3‚Ñã‚Çì) * ùí©[0] - 2*k/(3‚Ñã‚Çì) *ùí©[2] + k/(3‚Ñã‚Çì) *Œ®
        for ‚Ñì in 2:(‚Ñì_ŒΩ-1)
            ùí©‚Ä≤[‚Ñì] =  k / ((2‚Ñì+1) * ‚Ñã‚Çì) * ( ‚Ñì*ùí©[‚Ñì-1] - (‚Ñì+1)*ùí©[‚Ñì+1] )
        end
        ùí©‚Ä≤[‚Ñì_ŒΩ] =  k / ‚Ñã‚Çì  * ùí©[‚Ñì_ŒΩ-1] - (‚Ñì_ŒΩ+1)/(‚Ñã‚Çì *Œ∑‚Çì) *ùí©[‚Ñì_ŒΩ]
    
        # photons
        Œ† = Œò[2] + Œò·µñ[2] + Œò·µñ[0]
        @set! Œò‚Ä≤[0] = -k / ‚Ñã‚Çì * Œò[1] - Œ¶‚Ä≤
        Œò‚Ä≤[1] = k / (3‚Ñã‚Çì) * Œò[0] - 2k / (3‚Ñã‚Çì) * Œò[2] + k / (3‚Ñã‚Çì) * Œ® + œÑ‚Çì‚Ä≤ * (Œò[1] + v_b/3)
        for ‚Ñì in 2:(‚Ñì·µß-1)
            Œò‚Ä≤[‚Ñì] = ‚Ñì * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò[‚Ñì-1] -
                (‚Ñì+1) * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò[‚Ñì+1] + œÑ‚Çì‚Ä≤ * (Œò[‚Ñì] - Œ† * Bolt.Œ¥_kron(‚Ñì, 2) / 10)
        end
    
        # # polarized photons
        @set! Œò·µñ‚Ä≤[0] = -k / ‚Ñã‚Çì * Œò·µñ[1] + œÑ‚Çì‚Ä≤ * (Œò·µñ[0] - Œ† / 2)
        for ‚Ñì in 1:(‚Ñì·µß-1)
            Œò·µñ‚Ä≤[‚Ñì] = ‚Ñì * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò·µñ[‚Ñì-1] -
                (‚Ñì+1) * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò·µñ[‚Ñì+1] + œÑ‚Çì‚Ä≤ * (Œò·µñ[‚Ñì] - Œ† * Bolt.Œ¥_kron(‚Ñì, 2) / 10)
        end
    
        # # photon boundary conditions: diffusion damping #FIXME wrong (merge with fix branch)
        Œò‚Ä≤[‚Ñì·µß] = k / ‚Ñã‚Çì * Œò[‚Ñì·µß-1] - (‚Ñì·µß + 1) / (‚Ñã‚Çì * Œ∑‚Çì) + œÑ‚Çì‚Ä≤ * Œò[‚Ñì·µß]
        Œò·µñ‚Ä≤[‚Ñì·µß] = k / ‚Ñã‚Çì * Œò·µñ[‚Ñì·µß-1] - (‚Ñì·µß + 1) / (‚Ñã‚Çì * Œ∑‚Çì) + œÑ‚Çì‚Ä≤ * Œò·µñ[‚Ñì·µß]
        
        # massive neutrinos
        #FIXME ‚Ñ≥‚Ä≤ assignment does not work in this loop for some reason??
        for i_q in 1:nq
            q = Bolt.xq2q(bg.quad_pts[i_q] ,logqmin,logqmax)
            œµ = ‚àö(q^2 + (a*m_ŒΩ)^2)
            df0 = dlnf0dlnq(q,par)
            du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1) + 0*nq + i_q] = - k / ‚Ñã‚Çì *  q/œµ * ‚Ñ≥[1* 10+i_q-1]  + Œ¶‚Ä≤ * df0 #‚Ñ≥‚Ä≤[0*nq+i_q-1]
            du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1) + 1* nq+i_q] = k / (3‚Ñã‚Çì) * ( q/œµ * (‚Ñ≥[0* nq+i_q] - 2‚Ñ≥[2* nq+i_q])  - œµ/q * Œ®  * df0) #‚Ñ≥‚Ä≤[1* nq+i_q]
            for ‚Ñì in 2:(‚Ñì_mŒΩ-1)
                du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1) + ‚Ñì* nq+i_q]=  k / ‚Ñã‚Çì * q / ((2‚Ñì+1)*œµ) * ( ‚Ñì*‚Ñ≥[(‚Ñì-1)* nq+i_q-1] - (‚Ñì+1)*‚Ñ≥[(‚Ñì+1)* nq+i_q-1] ) #‚Ñ≥‚Ä≤[‚Ñì* nq+i_q]
            end
            du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1) + ‚Ñì_mŒΩ* nq+i_q] =  q / œµ * k / ‚Ñã‚Çì * ‚Ñ≥[(‚Ñì_mŒΩ-1)* nq+i_q-1] - (‚Ñì_mŒΩ+1)/(‚Ñã‚Çì *Œ∑‚Çì) *‚Ñ≥[(‚Ñì_mŒΩ)* nq+i_q-1] #‚Ñ≥‚Ä≤[‚Ñì_mŒΩ* nq+i_q]  MB (58) similar to rel case but w/ q/œµ
        end

        # for some reason OffsetArray values are not mutating...do it by hand...
        for i in 1:(‚Ñì·µß+1)
            du[i] = Œò‚Ä≤[i-1]
            du[(‚Ñì·µß+1)+i] = Œò·µñ‚Ä≤[i-1]
        end
        for i in 1:(‚Ñì_ŒΩ+1)
            du[2(‚Ñì·µß+1)+i] = ùí©‚Ä≤[i-1]
        end
        # See above 
        # for i in 1:(‚Ñì_mŒΩ+1)
        #     for j in 1:nq
        #         du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+i*nq + j-1] = ‚Ñ≥‚Ä≤[0* nq+i-1]
        #     end
        # end

        du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*nq+1] = Œ¶‚Ä≤
        du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*nq+2] = Œ¥‚Ä≤
        du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*nq+3] = v‚Ä≤
        du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*nq+4] = Œ¥_b‚Ä≤
        du[2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*nq+5] = v_b‚Ä≤ 

       return nothing
    end

    function batch_f_kernel!(du_batch, x·µ¢_batch)
        i = (blockIdx().x - 1) * blockDim().x + threadIdx().x
        f_kernel!(@view(du_batch[:,i]), x·µ¢_batch[1,i])
        nothing
    end

    f_kernel!, batch_f_kernel!

end

##

## gpu (single kernel)
bench_f_kernel!(du, x·µ¢) = CUDA.@sync @cuda f_kernel!(du, x·µ¢)
@btime bench_f_kernel!($du, $x·µ¢); # 121Œºs

## gpu (8192-batched kernel)
du_batch = du .* cu(ones(128*64)')
x·µ¢_batch = x·µ¢ .* cu(ones(128*64)')
bench_batch_f_kernel!(du_batch, x·µ¢_batch) = @cuda threads=128 blocks=64 batch_f_kernel!(du_batch, x·µ¢_batch)
@btime CUDA.@sync bench_batch_f_kernel!(du_batch, x·µ¢_batch); # 180Œºs

## cpu (single thread)
@btime f_kernel!(du, x·µ¢) # 4.3Œºs
