using CUDA
using DiffEqGPU, OrdinaryDiffEq
using Pkg
Pkg.activate("/pscratch/sd/j/jsull/julia/Bolt.jl")
using Bolt
using ForwardDiff
#using Plots
using BenchmarkTools

# bg/ion setup
ùï° = CosmoParams()
n_q=15
logqmin,logqmax = -6,-1
bg = Background(ùï°; x_grid=-20.0:0.01:0.0, nq=n_q)
ùï£ = Bolt.RECFAST(bg=bg, Yp=ùï°.Y_p, OmegaB=ùï°.Œ©_b)
ih = IonizationHistory(ùï£, ùï°, bg)
kmin,kmax= 0.1bg.H‚ÇÄ*100,5000bg.H‚ÇÄ
k_grid = log10_k(kmin,kmax,33)

‚Ñì·µß=50
‚Ñì_ŒΩ=50
‚Ñì_mŒΩ=20
reltol=1e-5 #cheaper  rtol
pertlen = 2(‚Ñì·µß+1)+(‚Ñì_ŒΩ+1)+(‚Ñì_mŒΩ+1)*n_q+5
results=zeros(pertlen,length(bg.x_grid))
‚Ñ≥œÅ,‚Ñ≥œÉ = zeros(length(bg.x_grid)),zeros(length(bg.x_grid)) #arrays for the massive neutrino integrated perts
hierarchy = Hierarchy(BasicNewtonian(), ùï°, bg, ih, k_grid[1], ‚Ñì·µß, ‚Ñì_ŒΩ, ‚Ñì_mŒΩ,n_q)

#function k_boltsolve(hierarchy::Hierarchy{T}, ode_alg=KenCarp4(); reltol=1e-6) where T
x·µ¢ = first(hierarchy.bg.x_grid)
u‚ÇÄ = Bolt.initial_conditions(x·µ¢, hierarchy)
T=Float32 #will not need this later when T is inferred from the function
prob = ODEProblem{true}(Bolt.hierarchy!, u‚ÇÄ, (x·µ¢ , zero(T)), hierarchy)
#to create the en
prob_func = (prob,i,repeat) -> remake(prob,p=Hierarchy(prob.p.integrator,
                                                       prob.p.par,
                                                       prob.p.bg,
                                                       prob.p.ih,
                                                       k_grid[i],
                                                       prob.p.‚Ñì·µß,
                                                       prob.p.‚Ñì_ŒΩ,
                                                       prob.p.‚Ñì_mŒΩ,
                                                       prob.p.nq)
                                     )
eprob = EnsembleProblem(prob, prob_func = prob_func, safetycopy=false)
#@time sol = solve(prob,KenCarp4(),EnsembleGPUArray(),trajectories=10,saveat=1.0f0) this does not work for some reason...
#^I am matching the syntax since the below works without trying to use the GPU
@time esol = solve(eprob,KenCarp4(),EnsembleThreads(),trajectories=length(k_grid),saveat=bg.x_grid,reltol=reltol,dense=false)
@time for i in length(k_grid)
    hierarchy = Hierarchy(BasicNewtonian(), ùï°, bg, ih, k_grid[i], ‚Ñì·µß, ‚Ñì_ŒΩ, ‚Ñì_mŒΩ,n_q)
    prob = ODEProblem{true}(Bolt.hierarchy!, u‚ÇÄ, (x·µ¢ , zero(T)), hierarchy)
    solve(prob,KenCarp4(),saveat=bg.x_grid,reltol=reltol,dense=false)(bg.x_grid)
end

#println(esol[end]/sols)
